swi
swirl()
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col="blue")
abline(h=0.4, col = "red")
6
5
12
abline(h = 0.5, col = "red")
dist(dFsm)
hc
heatmap(dataMatrix)
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(hclust(dist(mt)))
dist(mt)
plot(denmt)
distmr
distmt
cmat
points(cx,cy,col=c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(dataMatrix[,1], dataMatrix[,2], cx,cy)
mdist(x,y, cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x, newClust, mean)
newClust
tapply(y, newClust, mean)
points(newCx,newCy, col=cols1, pch=8,cex=2,lwd=2)
mdit
mdist
mdist(x,y,newCx,newCy)
apply(distTmp2,which.min)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y, col=kmObj$cluster, pch=19,cex=2)
points(kmObj$centers, col=c("black","red","green")), pch=3,cex=3,lwd=3)
points(kmObj$centers, col=c("black","red","green"), pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster, pch=19,cex=2)
dataFrame
dist(dataFrame)
hclust(dist(dataFrame))
h <- hclust(dist(dataFrame))
plot(h$cluster)
h
h$clust
h$cluster
str(h)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam)
?t
setwd("~/Desktop/Coursera Data Science/5 - Reproducible Research/Course Project 1/RepData_PeerAssessment1")
activity <- read.csv("activity.zip")
activity <- read.csv("activity.csv")
activity
View(activity)
24 * 60
1440 / 5
str(activity)
sum(is.na(activity$steps))
summary(activity)
?hist
hist(activity)
hist(activity$steps)
hist(activity$date)
hist(activity$date, activity$steps)
hist(activity$interval, activity$steps)
data("AirPassengers")
AirPassengers
hist(AirPassengers)
perday <- tapply(activity$steps, activity$date, sum)
perday
perday <- tapply(activity$steps, activity$date, sum, na.rm = T)
perday
hist(perday)
hist(perday, break = 60)
hist(perday, breaks = 60)
hist(perday, breaks = 20)
hist(perday, breaks = 15)
library(ggplot2)
qplot(perday)
qplot(perday, binwidth = 20)
qplot(perday, binwidth = 100)
qplot(perday, binwidth = 1000)
qplot(perday, binwidth = 10000)
qplot(perday, bins = 40)
qplot(perday, bins = 50)
qplot(perday, bins = 10)
meanStepsInterval <- tapply(activity$steps, as.factor(activity$interval), na.rm = TRUE)
meanStepsInterval <- tapply(activity$steps, as.factor(activity$interval), mean,na.rm = TRUE)
meanStepsInterval
plot(meanStepsInterval, type = 1)
names(meanStepsInterval)
plot(as.numeric(names(meanStepsInterval)),meanStepsInterval, type = 1)
plot(x = as.numeric(names(meanStepsInterval)),y = meanStepsInterval, type = 1)
plot(x = as.numeric(names(meanStepsInterval)),y = meanStepsInterval)
plot(x = as.numeric(names(meanStepsInterval)),y = meanStepsInterval, type = l)
plot(x = as.numeric(names(meanStepsInterval)),y = meanStepsInterval, type = "l")
library(lubridate)
hm(2350)
hm("2350")
hm("23:50")
?hm
which.max(meanStepsInterval)
max(meanStepsInterval)
summary(meanStepsInterval)
myinterval <- as.data.frame(meanStepsInterval)
View(myinterval)
which.max(myinterval)
which.max(myinterval$meanStepsInterval)
meanStepsInterval[which.max(meanStepsInterval)]
abline(meanStepsInterval[which.max(meanStepsInterval)])
abline(h = meanStepsInterval[which.max(meanStepsInterval)])
names(meanStepsInterval[which.max(meanStepsInterval)])
activity$steps[is.na(activity$steps)]
which(activity$steps[is.na(activity$steps)])
?which
which(is.na(activity$steps))
lapply(activity, function(x) is.na(x$steps))
lapply(activity, function(x) is.na(x))
lapply(activity, function(x) is.na(x)$steps)
lapply(activity, function(x) is.na(x[,1]))
lapply(activity$steps, function(x) is.na(x))
dfInterval <- as.data.frame(meanStepsInterval)
View(dfInterval)
names(dfInterval) <- "interval"
dfInterval <- as_tibble(meanStepsInterval)
library(data.table)
library(dplyr)
dfInterval <- as_tibble(meanStepsInterval)
View(dfInterval)
?as_tibble
dfInterval <- tibble::rownames_to_column(dfInterval)
View(dfInterval)
names(dfInterval) <- c("interval","mean")
library(dplyr)
for(i in 1 : nrow(activity)){
if(is.na(activity[i,]$steps)){
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("interval","mean")
meanInterval <- dfInterval[dfInterval$interval == activity[i,]$interval,]$mean
print(meanInterval)
}
}
View(myinterval)
library(dplyr)
for(i in 1 : nrow(activity)){
if(is.na(activity[i,]$steps)){
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("interval","mean")
meanInterval <- dfInterval[dfInterval$interval == activity[i,]$interval,]$mean
activity[i,]$steps <- meanInterval
}
}
View(activity)
unzip(zipfile = "activity.zip")
activity <- read.csv("activity.csv")
library(dplyr)
for(i in 1 : nrow(activity)){
if(is.na(activity[i,]$steps)){
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("interval","mean")
meanInterval <- dfInterval[dfInterval$interval == activity[i,]$interval,]$mean
activity[i,]$steps <- meanInterval
}
}
unzip(zipfile = "activity.zip")
activity <- read.csv("activity.csv")
library(dplyr)
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("interval","mean")
for(i in 1 : nrow(activity)){
if(is.na(activity[i,]$steps)){
meanInterval <- dfInterval[dfInterval$interval == activity[i,]$interval,]$mean
activity[i,]$steps <- meanInterval
}
}
View(activity)
mean(activity$steps)
meanStepsInterval[1]
meanStepsInterval[2]
names(meanStepsInterval[2])
288/5
as_tibble(meanStepsInterval)
tibble::rownames_to_column(meanStepsInterval)
View(dfInterval)
library(dplyr)
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("interval","steps")
for(i in 1 : nrow(activity)){
if(is.na(activity[i,1])){
meanInterval <- as.numeric(activity[i,3])
steps <- dfInterval[interval == meanInterval,2]
activity[i,]$steps <- steps
}
}
View(activity)
summary(activity)
unzip(zipfile = "activity.zip")
activity <- read.csv("activity.csv")
summary(activity)
library(dplyr)
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("interval","steps")
for(i in 1 : nrow(activity)){
if(is.na(activity[i,1])){
meanInterval <- as.numeric(activity[i,3])
steps <- dfInterval[interval == meanInterval,2]
activity[i,]$steps <- steps
}
}
View(dfInterval)
library(dplyr)
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("interval","steps")
for(i in 1 : nrow(activity)){
if(is.na(activity[i,1])){
meanInterval <- as.numeric(activity[i,3])
steps <- dfInterval[interval == meanInterval,2]
activity[i,]$steps <- steps
}
}
library(dplyr)
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("interval","steps")
for(i in 1 : nrow(activity)){
if(is.na(activity[i,1])){
meanInterval <- as.numeric(activity[i,3])
steps <- dfInterval[interval == meanInterval,2]
activity[i,]$steps <- steps
}
}
View(dfInterval)
?subset
library(dplyr)
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("interval","steps")
for(i in 1 : nrow(activity)){
if(is.na(activity[i,1])){
meanInterval <- as.numeric(activity[i,3])
steps <- dfInterval["interval" == meanInterval,2]
activity[i,]$steps <- steps
}
}
View(activity)
library(dplyr)
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("int","steps")
for(i in 1 : nrow(activity)){
if(is.na(activity[i,1])){
meanInterval <- as.numeric(activity[i,3])
steps <- dfInterval[int == meanInterval,2]
activity[i,]$steps <- steps
}
}
View(dfInterval)
library(dplyr)
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("int","steps")
for(i in 1 : nrow(activity)){
if(is.na(activity[i,1])){
meanInterval <- as.numeric(activity[i,3])
steps <- subset(dfInterval, int == meanInterval, steps)
activity[i,]$steps <- steps
}
}
View(activity)
summary(activity)
View(activity)
mean(activity$steps)
summary(activity)
str(activity)
unzip(zipfile = "activity.zip")
activity <- read.csv("activity.csv")
summary(activity)
library(dplyr)
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("int","steps")
for(i in 1 : nrow(activity)){
if(is.na(activity[i,1])){
meanInterval <- as.numeric(activity[i,3])
steps <- subset(dfInterval, int == meanInterval, steps)
activity[i,1] <- steps
}
}
summary(activity)
View(activity)
stepsPerDay <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
mean(stepsPerDay)
?library
?weekdays
weekdays(activity[1:10, 2])
activity[1:10, 2]
activity[1, 2]
as.date(activity[1, 2])
as.Date(activity[1, 2])
weekdays(as.Date(activity[1, 2]))
weekdays(as.Date(activity[, 2]))
as.facotr(weekdays(as.Date(activity[, 2])))
as.factor(weekdays(as.Date(activity[, 2])))
?factor
table(as.factor(weekdays(as.Date(activity[, 2]))))
days <- table(as.factor(weekdays(as.Date(activity[, 2]))))
days <- (as.factor(weekdays(as.Date(activity[, 2]))))
days["Monday"]
days["Monday",]
days
days == "Monday"
days <- (as.factor(weekdays(as.Date(activity[, 2]))))
levels(days) <- list(weekday=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), weekend=c("Saturday", "Sunday"))
days
summary(day)
summary(days)
dfInterval <- as_tibble(meanStepsInterval)
dfInterval <- tibble::rownames_to_column(dfInterval)
names(dfInterval) <- c("int","steps")
cleanActivity <- activity
for(i in 1 : nrow(activity)){
if(is.na(activity[i,1])){
meanInterval <- as.numeric(activity[i,3])
steps <- subset(dfInterval, int == meanInterval, steps)
cleanActivity[i,1] <- steps
}
}
days <- (as.factor(weekdays(as.Date(cleanActivity[, 2]))))
levels(days) <- list(weekday=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), weekend=c("Saturday", "Sunday"))
cleanActivity <- cbind(cleanActivity,days)
daySum <- tapply(cleanActivity$steps, list(cleanActivity$date, cleanActivity$days), sum)
str(daySum)
head(daySum)
daySum <- tapply(cleanActivity$steps, list(cleanActivity$days, cleanActivity$date), sum)
head(daySum)
View(cleanActivity)
daySum <- tapply(cleanActivity$steps, list(as.factor(cleanActivity$date), as.factor(cleanActivity$days)), sum)
daySum
daySum <- cleanActivity %>% group_by(cleanActivity$date,cleanActivity$days) %>% summarise_all()
daySum <- cleanActivity %>% group_by(cleanActivity$date,cleanActivity$days) %>% summarise_all(sum)
daySum <- cleanActivity %>% group_by(cleanActivity$date,cleanActivity$days) %>% summarise_all(sum_steps = sum(steps))
daySum <- cleanActivity %>% group_by(cleanActivity$date,cleanActivity$days) %>% summarise(sum_steps = sum(steps))
View(daySum)
daySum <- cleanActivity %>% group_by(date,days) %>% summarise(sum_steps = sum(steps))
daySum <- cleanActivity %>% group_by(date,days) %>% summarise(steps = sum(steps))
ggplot(data=daySum, aes(x=date, y=steps, group=days, color = days)) +
geom_line() +
ggtitle("Steps per day")
View(cleanActivity)
daySum <- cleanActivity %>% group_by(interval,days) %>% summarise(steps = sum(steps))
ggplot(data=daySum, aes(x=interval, y=steps, group=days, color = days)) +
geom_line() +
ggtitle("Steps per day")
ggplot(data=daySum, aes(x=interval, y=steps)) +
geom_line() +
facet_grid(. ~ days) +
ggtitle("Steps per day")
ggplot(data=daySum, aes(x=interval, y=steps)) +
geom_line() +
facet_grid(days ~ .) +
ggtitle("Steps per day")
ggplot(data=daySum, aes(x=interval, y=steps, color=interval)) +
geom_line() +
facet_grid(days ~ .) +
ggtitle("Steps per day")
ggplot(data=daySum, aes(x=interval, y=steps, color=days)) +
geom_line() +
facet_grid(days ~ .) +
ggtitle("Steps per day")
install.packages("pandoc")
install.packages("pdflatex")
?round
View(daySum)
meanStepsInterval
class(meanStepsInterval)
meanStepsInterval[1,]
meanStepsInterval[1]
meanStepsInterval[2]
names(meanStepsInterval)
names(meanStepsInterval[2])
names(meanStepsInterval[2]) == 5
which(names(meanStepsInterval[2]) == 5)
which(names(meanStepsInterval[2]) == 0)
which(names(meanStepsInterval[2]) == 10)
which(names(meanStepsInterval) == 10)
which(names(meanStepsInterval) == 0)
getSteps <- function(interval){
index <- which(names(meanStepsInterval) == interval)
meanStepsInterval[index]
}
getSteps(50)
getSteps(51)
?row
filledActivity <- lapply(activity$steps, getSteps(activity$interval))
getSteps <- function(interval){
index <- which(names(meanStepsInterval) == interval)
meanStepsInterval[index]
}
fillSteps <- function(x){
if (is.na(x[1])){
x[1] <- getSteps(x[3])
}
}
filledActivity <- activity
str(filledActivity)
sum(is.na(filledActivity$steps))
summary(filledActivity)
summary(activity)
unzip(zipfile = "activity.zip")
activity <- read.csv("activity.csv")
getSteps <- function(interval){
index <- which(names(meanStepsInterval) == interval)
meanStepsInterval[index]
}
fillSteps <- function(x){
if (is.na(x[1])){
x[1] <- getSteps(x[3])
}
}
filledActivity <- activity
summary(filledActivity)
filledActivity <- apply(activity,1,fillSteps)
filledActivity <- apply(activity,1,fillSteps)
fillSteps <- function(x){
#if (is.na(x[1])){
#   x[1] <- getSteps(x[3])
#}
print(x[1])
}
filledActivity <- apply(activity,1,fillSteps)
sum(is.na(filledActivity))
fillSteps <- function(x){
(is.na(x[1])){
fillSteps <- function(x){
if (is.na(x[1])){
steps <- getSteps(x[3])
}
}
filledActivity <- apply(activity,1,fillSteps)
fillSteps <- function(x){
if (is.na(x[1])){
steps <- getSteps(x[3])
print(class(x))
}
}
filledActivity <- apply(activity,1,fillSteps)
fillSteps <- function(x){
if (is.na(x[1])){
x[1] <- as.character(getSteps(x[3]))
}
}
filledActivity <- apply(activity,1,fillSteps)
fillSteps <- function(x){
if (is.na(x[1])){
#x[1] <- as.character(getSteps(x[3]))
print(x[3])
}
}
filledActivity <- apply(activity,1,fillSteps)
fillSteps <- function(x){
if (is.na(x[1])){
#x[1] <- as.character(getSteps(x[3]))
#print(x[3])
x[1] <- "test"
}
}
filledActivity <- apply(activity,1,fillSteps)
View(filledActivity)
filledActivity <- lapply(activity,fillSteps)
View(filledActivity)
str(filledActivity)
str(filledActivity$steps)
fillSteps <- function(x){
if (is.na(x[1])){
x[1] <- as.character(getSteps(x[3]))
}
return(x)
}
filledActivity <- apply(activity,1,fillSteps)
fillSteps <- function(x){
if (is.na(x[1])){
x[1] <- "hoi"
}
return(x)
}
filledActivity <- apply(activity,1,fillSteps)
View(filledActivity)
